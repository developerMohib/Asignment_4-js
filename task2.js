
function calculateMoney(ticketSale ){

    if( typeof(ticketSale) !== 'number' ){
        return 'Ticket selling should be integer Number. ';
    }
    else if( ticketSale < 0 ){
        return 'Error, Ticket selling should be Positive or Zero.';
    }
    else{
        let ticketPrice = 120 ;
        let costGateKeeper = 500;
        let perStuffCost = 50;
    
        let stuffCost = 8 * perStuffCost ;
    
        let earnOfBakerBhai = ticketPrice * ticketSale;
    
        let costOfBakerBhai = costGateKeeper + stuffCost;
        
        let saveMoney = earnOfBakerBhai - costOfBakerBhai;
        return saveMoney;
    }
}

let bakerVai = calculateMoney( 555 );
document.write(bakerVai , ' <br>');



// task 2

function checkName(name){
    let myName = name;
    // number problem how to solve ???? 
    // array problem how to solve ??

    // myName = myName.trim();

    if(typeof(myName) !== 'string'){
        return 'invalid'
    }

    else if( myName.slice(-1) === 'a' || myName.slice(-1) === 'e' || myName.slice(-1) === 'i' || myName.slice(-1) === 'o' || myName.slice(-1) === 'u' || myName.slice(-1) === 'y' || myName.slice(-1) === 'w' ){
        return 'Good Name';
    }
    else{
        return 'Bad Name';
    }
}
let myName = checkName( ["22a"] );
document.write(myName , ' <br> ');

// Task 3


function deleteInvalids(array) {
    let newArray = [];
    if(!Array.isArray(array)){
        return 'invalid Array';
    }
    for (let i = 0; i < array.length; i++) {
        if (typeof (array[i]) === 'number' && !isNaN(array[i])) {
            newArray.push(array[i]);
        }
    }
    return newArray;
}
let array = [NaN, 1, 12, 0, -1, undefined, 'mohibA'] ;
let callArray = deleteInvalids(array);
document.write(callArray, '<br>');
console.log(callArray);

function password(obj) {

    if (!obj.hasOwnProperty('name') || !obj.hasOwnProperty('birthYear') || !obj.hasOwnProperty('siteName')) {
        return 'invalid';
    }

    let name = obj.name;
    let birth = obj.birthYear ;
    let site = obj.siteName;

    let siteName = site.charAt(0).toUpperCase() + site.slice(1);

    if(birth !== 'number' || birth.toString().length !== 4 ){
        return 'invalid'
    }

    let allConcat = siteName.concat('#', name, '@', birth);
    return allConcat ;


}

let kolimBhai = password({ name: 'kolimuddin' , birthYear: 1999 , siteName: 'google' });
console.log(kolimBhai);
document.write(kolimBhai);


/*
Function Name Must be monthlySavings()
‡¶∂‡¶æ‡¶π‡ßá ‡¶¶‡ßá ‡¶∞ ‡¶Ø‡ßá ‡¶∏‡¶ï‡¶≤ ‡¶™‡ßá ‡¶Æ‡ßá ‡¶®‡ßç‡¶ü 3000 ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¨‡¶æ ‡¶§‡¶æ‡¶∞ ‡¶¨‡ßá ‡¶∂‡¶ø ‡¶∏‡ßá ‡¶∏‡¶ï‡¶≤ ‡¶™‡ßá ‡¶Æ‡ßá ‡¶®‡ßç‡¶ü ‡¶•‡ßá ‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï Tax ‡¶π‡¶ø ‡¶∏‡ßá ‡¶¨‡ßá ‡ß®‡ß¶% ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ï‡ßá ‡¶ü‡ßá
‡¶®‡ßá ‡ßü ‡•§ ‡¶è‡¶ñ‡¶® ‡¶Æ ‡ßã‡¶ü ‡¶á‡¶®‡¶ï‡¶æ‡¶Æ ‡¶•‡ßá ‡¶ï‡ßá Tax ‡¶ó‡ßÅ‡¶≤ ‡ßã ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø ‡ßü‡ßá ‡¶è‡¶¨‡¶Ç Living cost ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø ‡ßü‡ßá ‡¶¨‡¶æ‡¶ï‡ßÄ ‡¶Ø‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‡¶∏‡ßá ‡¶ü‡¶æ ‡¶á
‡¶π‡¶≤ ‡ßã ‡¶∂‡¶æ‡¶π‡ßá ‡¶¶‡ßá ‡¶∞ ‡¶∏‡ßá ‡¶≠‡¶ø ‡¶Ç‡¶∏ ‡•§ ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ü‡¶ø ‡¶∂‡¶æ‡¶π‡ßá ‡¶¶‡ßá ‡¶∞ ‡¶∏‡ßá ‡¶≠‡¶ø ‡¶Ç‡¶∏ ‡¶ï‡ßá ‡¶∞‡¶ø ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá ‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶∏‡ßá ‡¶≠‡¶ø ‡¶Ç‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡¶§ ‡ßã ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡¶æ
‡¶•‡¶æ‡¶ï‡ßá ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶∏‡ßá ‡¶≠‡¶ø ‡¶Ç‡¶∏ ‡¶è‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶Ø‡¶¶‡¶ø ‡ß¶ ‡¶è‡¶∞ ‡¶ö‡ßá ‡ßü‡ßá ‡¶ï‡¶Æ ‡¶π‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ü‡¶ø ‡¶∞‡¶ø ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶Ç ‡¶§‡¶æ‡¶π‡¶≤ ‡ßã ‚Äúearn
more‚Äù ‡•§
/*function signature/sample 
function password(obj) {
    //write your code here
    }
    Input :
    ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ü‡¶ø ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶®‡ßá ‡¶¨‡ßá ‡¶è‡¶ï‡¶ü‡¶ø Array (All payments) ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø number (Living cost) ‡•§
    Output :
    ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø number ‡¶Ö‡¶•‡¶¨‡¶æ string ‡¶∞‡¶ø ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá ‡•§
    ‚óè ‡¶Ø‡¶¶‡¶ø savings 0 ‡¶¨‡¶æ ‡¶§‡¶æ‡¶∞ ‡¶•‡ßá ‡¶ï‡ßá ‡¶¨‡ßá ‡¶∂‡¶ø ‡¶π‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∞‡¶ø ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá number ( Total Savings )
    ‚óè ‡¶Ø‡¶¶‡¶ø savings 0 ‡¶•‡ßá ‡¶ï‡ßá ‡¶õ ‡ßã‡¶ü ‡¶π‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∞‡¶ø ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá String ( ‚Äúearn more‚Äù)
    Challenge üì¢ : ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ü‡¶ø ‡¶§‡¶ñ‡¶® ‡¶á ‚Äúinvalid input‚Äù string ‡¶ü‡¶ø ‡¶∞‡¶ø ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá ‡•§
    ‚óè ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø ‡¶ü‡¶æ‡¶∞ ‡¶ü‡¶ø Array ‡¶®‡¶æ ‡¶π‡ßü
    ‚óè ‡¶Ø‡¶¶‡¶ø ‡¶ì 2‡ßü ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø ‡¶ü‡¶æ‡¶∞ ‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶π‡ßü
    
*/



function monthlySavings(allPayments, livingCost){


    let earn = 0;
    for(let i = 0; i < allPayments.length; i++){
        let payment = allPayments[i];
        document.write(payment, ' payment');
        if(){

        }
    }

}
let payments = [2000, 4000, 5000];
let livingCost = 5400;

document.write(monthlySavings(payments, livingCost));














/*






function monthlySavings(allPayments, livingCost) {
    
    if (!Array.isArray(allPayments) || typeof livingCost !== 'number') {
        return "invalid input";
    }

    let totalIncome = 0;

    // Calculate total income after applying taxes
    for (let i = 0; i < allPayments.length; i++) {
        let payment = allPayments[i];
        if (payment > 3000) {
            payment *= 0.8; // Apply 20% tax to payments over 3000
        }
        totalIncome += payment;
    }

    // Calculate total savings after deducting living cost
    let totalSavings = totalIncome - livingCost;

    // Check if total savings are greater than or equal to 0
    if (totalSavings >= 0) {
        return totalSavings; // Return total savings if positive or 0
    } else {
        return "earn more"; // Return "earn more" if total savings are negative
    }
}

// Example usage:
let payments = [2000, 4000, 5000];
let livingCost = 2500;

console.log(monthlySavings(payments, livingCost)); // Output: 6200 (total savings)

